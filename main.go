package main

import (
	"encoding/json"
	"log"
	"net/http"
	"time"

	_ "go-swag-tests/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/go-chi/chi"
	httpSwagger "github.com/swaggo/http-swagger/v2"
)

// @title Swagger Example API
// @version 1.0
// @description This is a sample server Petstore server.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:1323
// @SecurityDefinitions.apiKey Bearer
// @in header
// @name Authorization
// @BasePath /
func main() {
	r := chi.NewRouter()

	// Хендлер для вывода текущего времени
	r.Get("/time", GetTime)

	// Защищенный эндпоинт
	r.Get("/secure", SecureEndpoint)

	// Хендлер для доступа к документации Swagger
	r.Get("/swagger/*", httpSwagger.Handler(
		httpSwagger.URL("http://localhost:1323/swagger/doc.json"), //The url pointing to API definition
	))

	log.Fatal(http.ListenAndServe(":1323", r))
}

// TimeResponse представляет структуру ответа с текущим временем
type TimeResponse struct {
	Time string `json:"time"` // Время в формате RFC3339
}

// GetTime возвращает текущее время в формате JSON
// @Summary Получить текущее время
// @Description Получить текущее время в формате JSON
// @Produce  json
// @Success 200 {object} TimeResponse "Текущее время в формате JSON"
// @Router /time [get]
func GetTime(w http.ResponseWriter, r *http.Request) {
	currentTime := time.Now().Format(time.RFC3339)
	response := TimeResponse{Time: currentTime}
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

// SecureResponse представляет структуру ответа из защищенного эндпоинта
type SecureResponse struct {
	Message string `json:"message"`
}

// SecureEndpoint - защищенный эндпоинт, требующий аутентификации
// @Summary Защищенный эндпоинт
// @Description Защищенный эндпоинт, требующий аутентификации
// @Security Bearer
// @Produce  json
// @Success 200 {object} Response "Это защищенный эндпоинт"
// @Router /secure [get]
func SecureEndpoint(w http.ResponseWriter, r *http.Request) {
	// Проверка наличия JWT токена в заголовке Authorization
	token := r.Header.Get("Authorization")
	if token == "" {
		http.Error(w, "Отсутствует токен авторизации", http.StatusUnauthorized)
		return
	}

	// Дополнительные проверки валидности токена и авторизации могут быть выполнены здесь

	// Если все проверки пройдены, возвращаем успешный ответ
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	response := Response{Message: "Это защищенный эндпоинт"}
	json.NewEncoder(w).Encode(response)
}

// Response представляет структуру ответа эндпоинта
type Response struct {
	Message string `json:"message"`
}
